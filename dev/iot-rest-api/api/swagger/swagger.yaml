swagger: "2.0"
info:
  version: "0.0.1"
  title: IOT Back-end REST API
  description: https://github.com/heig-vd-iot2018/back-end
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
  
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
security:
  - Bearer: [ ]
paths:
  /auth:
    x-swagger-router-controller: Authentication
    post:
      operationId: signIn
      description: Sign a user in using username and password credentials.
        
      security: []
      parameters:
        - in: body
          name: credentials
          description: Credentials object.
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      
      responses:
        "200":
          description: Authentication successfull.
          schema: 
            $ref: "#/definitions/AuthResponse"
        '400':
          description: Bad request
          schema:
            $ref: "#/definitions/ErrorResponse"
        '401':
          description: Unauthorized username or password
          schema:
            $ref: "#/definitions/ErrorResponse"
  /logout:
    x-swagger-router-controller: Authentication
    post:
      operationId: signOut
      description: Sign a user out using the provided token
      produces:
        - text/plain
        - application/json
      responses:
        "200":
          description: Success
        "401":
          description: Unauthorized username or password
  /sensors:
    x-swagger-router-controller: Sensor
    get:
      description: Returns list of all sensors
      operationId: getSensors
      
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Sensor"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
              
  /sensors/{id}:
    x-swagger-router-controller: Sensor
    get:
      description: Get a sensor
      operationId: getSensor
      
      parameters:
        - name: id
          in: path
          description: The id of the sensors to get
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Sensor"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      description: To modifiy a sensors
      operationId: patchSensor
      
      produces:
        - text/plain
        - application/json
      
      parameters:
        - name: id
          in: path
          description: The id of the sensors to get
          required: true
          type: string
        - name: data
          in: body
          description: The modified data of the sensors
          required: true
          schema:
            $ref: "#/definitions/ModifiedSensor"
      responses:
        200:
          description: OK
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    
  /nodes:
    x-swagger-router-controller: Node
    get:
      description: Returns list of all nodes
      operationId: getNodes
      
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Node"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: Add a node to the DB
      parameters:
        - in: body
          name: node
          description: The node to be put in db
          required: true
          schema:
            $ref: '#/definitions/Node'
      operationId: postNode
      
      responses:
        "201":
          description: Node created
          schema:
            $ref: "#/definitions/Node"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    
  /nodes/{id}:
    x-swagger-router-controller: Node
    get:
      description: Returns a node
      operationId: getNode
      
      parameters:
        - name: id
          in: path
          description: The id of the node to get
          required: true
          type: integer
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/NodeDTO"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
            
  /sensors/data:
    x-swagger-router-controller: Sensor
    post:
      description: Allow sensors to post their data
      operationId: setData
      
      produces:
        - text/plain
        - application/json
      
      parameters:
        - name: data
          in: body
          description: The id of the node to set
          required: true
          schema:
            $ref: "#/definitions/SensorData"
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
      
  /swagger:
    x-swagger-pipe: swagger_raw


# complex objects have schema definitions
definitions:
  Credentials:
    required:
      - username
      - password
    
    properties:
      username:
        type: string
        minLength: 3
      password:
        type: string
        format: password
        minLength: 8
  
  AuthResponse:
    required:
      - token
    properties:
      token:
        type: string
        description: the JWT

  Node:
    required:
      - id
      - createdDate
      - lastUpdated
      - active
      - latitude
      - longitude
      - sensors

    properties:
      id:
        type: integer
      createdDate:
        type: string
      lastUpdated:
        type: string
      active:
        type: boolean
      latitude:
        type: string
      longitude:
        type: string
      sensors:
        type: array
        items:
          # Only id of sensors
          type: string
  
  NodeDTO:
    required:
      - id
      - createdDate
      - lastUpdated
      - active
      - latitude
      - longitude
      - sensors
      - data

    properties:
      id:
        type: integer
      createdDate:
        type: string
      lastUpdated:
        type: string
      active:
        type: boolean
      latitude:
        type: string
      longitude:
        type: string
      sensors:
        type: array
        items:
          # Only id of sensors
          type: string
      data:
        type: array
        items:
          $ref: "#/definitions/Data"

  Sensor:
    required:
      - id
      - dateCreated
      - dateUpdated
      - active
      - refreshInterval
      - encoding
      - values
      - documentationLink

    properties:
      id:
        type: string
      dateCreated:
        type: string
      dateUpdated:
        type: string
      active:
        type: boolean
      refreshInterval:
        type: integer
      encoding:
        type: string
      values:
        type: array
        items:
          type: string
      documentationLink:
        type: string
  
  ModifiedSensor:
    required:
      - dateCreated
      - dateUpdated
      - active
      - refreshInterval
      - encoding
      - values
      - documentationLink

    properties:
      dateCreated:
        type: string
      dateUpdated:
        type: string
      active:
        type: boolean
      refreshInterval:
        type: integer
      encoding:
        type: string
      values:
        type: array
        items:
          type: string
      documentationLink:
        type: string
        
  SensorData:
    required:
      - id
      - payload
    
    properties:
      id:
        type: string
      payload:
        type: string

  Data:
    required:
      - sensorId
      - type
      - date
      - value
    
    properties:
      sensorId:
        type: string
      type:
        type: string
      date:
        type: string
      value:
        type: number
        
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
